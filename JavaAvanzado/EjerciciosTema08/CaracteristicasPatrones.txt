1-	Patrón de diseño SINGLETON: este patrón se utiliza para garantizar que solo exista una instancia de una clase en todo el sistema. 
	Se utiliza cuando se necesita tener un objeto único que coordine y controle el acceso a algún recurso compartido. 
	Un ejemplo de caso de uso podría ser un objeto que maneje la CONEXION A BASE DE DATOS.

2-	Patrón de diseño FACTORY: es un patrón de diseño de software que se utiliza para crear objetos
	sin especificar la clase exacta del objeto que se creará. En lugar de crear objetos directamente utilizando el constructor de la clase, 
	se utiliza un método de fábrica que se encarga de crear el objeto deseado.

	El patrón Factory es muy útil cuando se quiere desacoplar el código que crea objetos del código que los utiliza, 
	lo que permite una mayor flexibilidad y reutilización del código.
	
	Un ejemplo de caso de uso puede ser en una fabrica de coches en la clase motor, puede tener varias cilindradas y en función de la cilindrada
	puede tener unas características u otras, para ello se definen por cilindrada y en función de la cilindrada ya creara un tipo de motor u otro.

3-	Patrón de diseño BUILDER: Este patrón se utiliza para construir objetos complejos paso a paso, separando la construcción de un objeto
	de su representación final. Se utiliza cuando se necesita crear objetos complejos con diferentes configuraciones o partes opcionales. 
	Un ejemplo de caso de uso podría ser la construcción de un objeto de tipo casa, donde se necesitan diferentes opciones para la construcción de la casa, 
	como la elección del tipo de techo o el número de habitaciones.

4-	Patrón de diseño PROTOTYPE: Este patrón se utiliza para crear objetos a partir de un prototipo existente. Se utiliza cuando se necesita crear un gran
	número de objetos similares, ya que la clonación es más eficiente que la creación de nuevos objetos. Un ejemplo de caso de uso podría ser la creación 
	de un sistema de mensajería, donde se clona un prototipo de un mensaje para crear mensajes similares.

5- 	Patrón de diseño ADAPTER: Este patrón se utiliza para permitir que objetos con interfaces incompatibles trabajen juntos. Se utiliza cuando se necesita 
	utilizar un objeto que tiene una interfaz incompatible con la interfaz requerida por el cliente. Un ejemplo de caso de uso podría ser la integración 
	de diferentes sistemas de pago, donde se utiliza un adaptador para proporcionar una interfaz común para diferentes métodos de pago.

6-	Patrón de diseño DECORATOR: Este patrón se utiliza para añadir funcionalidad a un objeto dinámicamente, sin afectar a otros objetos de la misma clase. 
	Se utiliza cuando se quiere añadir funcionalidad a un objeto sin modificar su estructura, lo que permite una mayor flexibilidad en el diseño. 
	Un ejemplo de caso de uso podría ser la personalización de un objeto de tipo automóvil, donde se añaden características adicionales como un sistema 
	de sonido de alta gama o un sistema de navegación GPS.

7-	Patrón de diseño Facade: Este patrón se utiliza para proporcionar una interfaz simplificada a un conjunto complejo de clases y objetos. 
	Se utiliza cuando se trabaja con sistemas complejos y se necesita proporcionar una interfaz sencilla a los clientes, para reducir la complejidad 
	y mejorar la legibilidad del código. Un ejemplo de caso de uso podría ser la creación de un sistema de gestión de reservaciones de hoteles, 
	donde se utiliza una fachada para proporcionar una interfaz única y sencilla a un conjunto complejo de clases y objetos.


